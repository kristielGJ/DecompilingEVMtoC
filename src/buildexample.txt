// The main interface
public Opcode {
  byte getOpcodeByte();
  
  Opcode build (byte [] array, int &location);
}


public Stop : Opcode {
  byte getOpcodeByte() { return 0x00; }

  Opcode build (byte [] array, int &location) {
      assert(array[location] == getOpcodeByte());
        ++location;
      return new Stop();
  }
}

public Add : Opcode {
  byte getOpcodeByte() { return 0x01; }
  Opcode build (byte [] array, int &location) {
      assert(array[location] == getOpcodeByte());
    ++location;
      return new Add();
  }
}

public Push : Opcode {
    byte immediate;
    Push(Byte i) {
        immediate = i;
    }
  byte getOpcodeByte() { return 0x60; } //per reference 
  Opcode build (byte [] array, int &location) {
      assert(array[location] == getOpcodeByte());
    ++location;
      return new Push(array[location++]);
  }
}


Opcodes lookuptable[] = {
    new Stop();
    new Add();   // Assuming it's opcode is 0x01
    new Sub();
    // ...
    new Push();
}

// Now let's use it takes in an array of bytes returns an array of opcodes
Opcode [] dissassemble(byte [] array) {
    Opcode [] program;
  int location = 0;
  while (location < array.length())
  {
    program.push_back(lookuptable[location].build(array, location));
  }
}